from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, ReplyKeyboardRemove
from time import sleep

from handlers.users.status_web import user_date, user_all_count, user_lvl, user_pay
from keyboards.default.admin import admin_courses
from keyboards.default.menu import choice, info, admin_btn, choice_courses, select_package
from loader import dp, bot
# from states.verification_coupon import State_coupon, State_chat_id
from states.verification_coupon import State_chat_id

# from handlers.users.menu import counter_web, counter_info_web
# from handlers.users.courses import counter_buy, counter_courses, counter_coupon


# counter_web = 0
# counter_info_web = 0
# counter_buy = 0
# counter_courses = 0
# counter_coupon = 0

list_admin = [745832259, 869546657]
act_admin = False
send_product = ''
chat_id = ''



@dp.message_handler(Command('admin'))
async def show_admin_btn(message: Message):
    if message.from_user.id in list_admin:
        await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=admin_btn)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º TriggerShop!')


@dp.message_handler(Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä—Å üíé'))
async def send_courses(message: Message):
    if message.from_user.id in list_admin:
        await message.answer('‚ùó–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å‚ùó', reply_markup=admin_courses)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º TriggerShop!')


@dp.message_handler(Text(equals=['Py start ‚ùó', 'Py pro ‚ùó', 'C_UNITY ‚ùó', '‚ùóPy start + Py pro‚ùó',
                                 '‚ùóPy pro + C_UNITY‚ùó', '‚ùóPy start + C_UNITY‚ùó']))
async def choose_course(message: Message):
    global send_product
    if message.from_user.id in list_admin:
        if message.text == 'Py start ‚ùó':
            send_product = '–ö—É—Ä—Å Py start ‚ùó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        elif message.text == 'Py pro ‚ùó':
            send_product = '–ö—É—Ä—Å Py pro ‚ùó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        elif message.text == 'C_UNITY ‚ùó':
            send_product = '–ö—É—Ä—Å C_UNITY ‚ùó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        elif message.text == '‚ùóPy start + Py pro‚ùó':
            send_product = '–ü–∞–∫–µ—Ç ‚ùóPy start + Py pro‚ùó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        elif message.text == '‚ùóPy pro + C_UNITY‚ùó':
            send_product = '–ü–∞–∫–µ—Ç ‚ùóPy pro + C_UNITY‚ùó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        elif message.text == '‚ùóPy start + C_UNITY‚ùó':
            send_product = '–ü–∞–∫–µ—Ç ‚ùóPy start + C_UNITY‚ùó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    await message.answer('–í–≤–µ–¥–∏ id —á–∞—Ç–∞, –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä—Å/–ø–∞–∫–µ—Ç', reply_markup=ReplyKeyboardRemove())
    await State_chat_id.answer_admin.set()

@dp.message_handler(state=State_chat_id.answer_admin)
async def get_chat_id(message: Message, state: FSMContext):
    global chat_id
    user_chat_id = message.text
    await state.update_data(answer=user_chat_id)
    data = await state.get_data()
    chat_id = data.get('answer')
    await state.finish()
    await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞')

    await bot.send_message(text=send_product, chat_id=chat_id)


# @dp.message_handler(Text(equals='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üîé'))
# async def show_statics(message: Message):
#     await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n'
#                          f'–ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –∫—É—Ä—Å—ã: {counter_courses}\n'
#                          f'–ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ info_web: {counter_info_web}\n'
#                          f'–ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ WEB: {counter_web}\n'
#                          f'–ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É: {counter_buy}\n'
#                          f'–ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å –∫—É–ø–æ–Ω–æ–º {counter_coupon}')

























